package com.example.TelegramTestBot.controller;

import com.example.TelegramTestBot.model.User;
import com.example.TelegramTestBot.service.UserService;
import com.example.TelegramTestBot.bot.SessionService;
import lombok.RequiredArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
public class ProfileController {

    private final UserService userService;
    private final SessionService sessionService;
    private final PasswordEncoder passwordEncoder;
    private final Set<Long> inProfileMenu = ConcurrentHashMap.newKeySet();
    private final Set<Long> inProfileEdit = ConcurrentHashMap.newKeySet();
    private final Map<Long, String> editField = new ConcurrentHashMap<>();
    public SendMessage startProfileMenu(long chatId, User user) {
        inProfileMenu.add(chatId);
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text("üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                .parseMode("Markdown")
                .replyMarkup(keyboard(
                        kRow("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
                        kRow("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                ))
                .build();
    }
    public SendMessage handleProfileMenu(Update upd, User user) {
        long chatId = upd.getMessage().getChatId();
        String choice = upd.getMessage().getText().trim().toLowerCase();
        switch (choice) {
            case "–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                return showProfile(chatId, user);
            case "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                String dummyPass = passwordEncoder.encode(UUID.randomUUID().toString());
                user.setFullName("–£–¥–∞–ª—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                user.setUsername("deleted_" + user.getId());
                user.setPassword(dummyPass);
                user.setChatId(null);
                user.setAuthenticated(false);
                userService.save(user);

                sessionService.invalidateSession(chatId);
                inProfileMenu.remove(chatId);

                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("‚úÖ –ü—Ä–æ—â–∞–π, –õ–µ–≥–µ–Ω–¥–∞, –º—ã —Ç–µ–±—è –Ω–µ –∑–∞–±—É–¥–µ–º")
                        .build();
            case "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
                inProfileMenu.remove(chatId);
                inProfileEdit.add(chatId);
                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
                        .replyMarkup(keyboard(
                                kRow("–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è", "–õ–æ–≥–∏–Ω"),
                                kRow("–ü–∞—Ä–æ–ª—å"),
                                kRow("–û—Ç–º–µ–Ω–∞")
                        ))
                        .build();
            case "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                inProfileMenu.remove(chatId);
                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                        .build();
            default:
                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
                        .build();
        }
    }
    public SendMessage handleProfileEdit(Update upd, User user) {
        long chatId = upd.getMessage().getChatId();
        String txt = upd.getMessage().getText().trim();
        if (!editField.containsKey(chatId)) {
            String choice = txt.toLowerCase();
            switch (choice) {
                case "–∏–º—è –ø—Ä–æ—Ñ–∏–ª—è":
                case "–ª–æ–≥–∏–Ω":
                    editField.put(chatId, choice);
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è *" + txt + "*:")
                            .parseMode("Markdown")
                            .build();
                case "–ø–∞—Ä–æ–ª—å":
                    editField.put(chatId, "password_old");
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:")
                            .build();
                case "–æ—Ç–º–µ–Ω–∞":
                    resetToMenu(chatId);
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                            .replyMarkup(menuKeyboard())
                            .build();
                default:
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                            .build();
            }
        }
        String state = editField.get(chatId);
        try {
            switch (state) {
                case "–∏–º—è –ø—Ä–æ—Ñ–∏–ª—è":
                    user.setFullName(txt);
                    userService.save(user);
                    break;
                case "–ª–æ–≥–∏–Ω":
                    if (userService.existsByUsername(txt) && !txt.equals(user.getUsername())) {
                        return SendMessage.builder()
                                .chatId(String.valueOf(chatId))
                                .text("‚ùå –õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
                                .build();
                    }
                    user.setUsername(txt);
                    userService.save(user);
                    break;
                case "password_old":
                    if (!passwordEncoder.matches(txt, user.getPassword())) {
                        return SendMessage.builder()
                                .chatId(String.valueOf(chatId))
                                .text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                                .build();
                    }
                    editField.put(chatId, "password_new");
                    return SendMessage.builder()
                            .chatId(String.valueOf(chatId))
                            .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
                            .build();
                case "password_new":
                    userService.updatePassword(user, txt);
                    break;
            }
        } catch (DataIntegrityViolationException ex) {
            resetToMenu(chatId);
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .replyMarkup(menuKeyboard())
                    .build();
        }
        editField.remove(chatId);
        resetToMenu(chatId);
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                .parseMode("Markdown")
                .replyMarkup(menuKeyboard())
                .build();
    }
    private void resetToMenu(long chatId) {
        inProfileEdit.remove(chatId);
        inProfileMenu.add(chatId);
    }
    private ReplyKeyboardMarkup menuKeyboard() {
        return keyboard(
                kRow("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
                kRow("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        );
    }
    public boolean isInProfileMenu(long chatId) {
        return inProfileMenu.contains(chatId);
    }
    public boolean isInProfileEdit(long chatId) {
        return inProfileEdit.contains(chatId);
    }
    private SendMessage showProfile(long chatId, User user) {
        StringBuilder sb = new StringBuilder()
                .append("üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n")
                .append("*–ò–º—è:* ").append(escapeMarkdown(user.getFullName())).append("\n")
                .append("*–õ–æ–≥–∏–Ω:* ").append(escapeMarkdown(user.getUsername())).append("\n")
                .append("*–†–æ–ª—å:* ").append(escapeMarkdown(user.getRole())).append("\n")
                .append("*Chat ID:* ").append(user.getChatId());
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(sb.toString())
                .parseMode("Markdown")
                .replyMarkup(keyboard(
                        kRow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
                        kRow("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                ))
                .build();
    }
    static KeyboardRow kRow(String... btns) {
        KeyboardRow row = new KeyboardRow();
        for (String text : btns) row.add(new KeyboardButton(text));
        return row;
    }
    private static ReplyKeyboardMarkup keyboard(KeyboardRow... rows) {
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);
        kb.setKeyboard(Arrays.asList(rows));
        return kb;
    }
    private String escapeMarkdown(String s) {
        return s == null ? "" : s.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("]", "\\]");
    }
}
