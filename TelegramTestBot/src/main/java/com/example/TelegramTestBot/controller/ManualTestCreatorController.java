package com.example.TelegramTestBot.controller;

import com.example.TelegramTestBot.bot.TestBot;
import com.example.TelegramTestBot.model.*;
import com.example.TelegramTestBot.service.TestCreationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component
@RequiredArgsConstructor
public class ManualTestCreatorController {

    private final TestCreationService testCreationService;
    public SendMessage start(Long chatId, User creator, String title) {
        Draft d = new Draft();
        d.test.setTitle(title);
        d.test.setCreator(creator);

        drafts.put(chatId, d);
        stages.put(chatId, Stage.ENTER_QTY_QUESTIONS);
        return plain(chatId, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤?");
    }
    private enum Stage {
        ENTER_TITLE,
        CHOOSE_MODE,
        ENTER_QTY_QUESTIONS,
        ENTER_QUESTION_TEXT,
        ENTER_QTY_OPTIONS,
        ENTER_OPTION_TEXT,
        CHOOSE_CORRECT,
        DONE
    }
    private static class Draft {
        Test test = new Test();
        int totalQuestions;
        int currentQuestionIndex = 0;
        Question currentQuestion;
        int totalOptions;
        int currentOptionIndex = 0;

        List<Question> questions = new ArrayList<>();
    }
    private final Map<Long, Stage> stages   = new ConcurrentHashMap<>();
    private final Map<Long, Draft> drafts   = new ConcurrentHashMap<>();
    public SendMessage handle(Update up, User user) {
        if (!up.hasMessage()) return null;
        Message msg   = up.getMessage();
        Long    chat  = msg.getChatId();
        String  text  = msg.hasText() ? msg.getText().trim() : "";

        if ("–æ—Ç–º–µ–Ω–∞".equalsIgnoreCase(text)) {
            return cancel(chat, user);     // –ø–µ—Ä–µ–¥–∞—ë–º user
        }

        Stage st = stages.get(chat);
        if (st == null) return null;

        Draft d  = drafts.get(chat);

        switch (st) {
            case ENTER_TITLE -> {
                if (text.isBlank()) return plain(chat, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                d.test.setTitle(text);
                stages.put(chat, Stage.CHOOSE_MODE);
                return btn(chat,
                        "–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã?",
                        List.of("–í—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å DOCX", "–û—Ç–º–µ–Ω–∞"));
            }

            case CHOOSE_MODE -> {
                if ("–∑–∞–≥—Ä—É–∑–∏—Ç—å docx".equalsIgnoreCase(text)) {
                    stages.remove(chat);
                    drafts.remove(chat);
                    return null;
                }
                if (!"–≤—Ä—É—á–Ω—É—é".equalsIgnoreCase(text))
                    return plain(chat,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.");

                stages.put(chat, Stage.ENTER_QTY_QUESTIONS);
                return plain(chat, "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤?");
            }

            case ENTER_QTY_QUESTIONS -> {
                int qty;
                try { qty = Integer.parseInt(text); }
                catch (NumberFormatException e){ return plain(chat,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."); }
                if (qty <= 0 || qty > 50) return plain(chat,"–î–æ–ø—É—Å—Ç–∏–º–æ 1-50.");
                d.totalQuestions = qty;
                d.currentQuestionIndex = 1;
                stages.put(chat, Stage.ENTER_QUESTION_TEXT);
                return plain(chat,
                        "–í–æ–ø—Ä–æ—Å 1/"+
                                d.totalQuestions+
                                ". –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
            }

            case ENTER_QUESTION_TEXT -> {
                if (text.isBlank()) return plain(chat,"–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äì –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                d.currentQuestion = new Question();
                d.currentQuestion.setText(text);
                stages.put(chat, Stage.ENTER_QTY_OPTIONS);
                return plain(chat,"–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç?");
            }

            /* 5. –∫–æ–ª-–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ */
            case ENTER_QTY_OPTIONS -> {
                int n;
                try { n = Integer.parseInt(text); }
                catch (NumberFormatException e){ return plain(chat,"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 2-10."); }
                if (n < 2 || n > 10) return plain(chat,"–î–æ–ø—É—Å—Ç–∏–º–æ 2-10.");
                d.totalOptions = n;
                d.currentOptionIndex = 1;
                stages.put(chat, Stage.ENTER_OPTION_TEXT);
                return plain(chat,
                        "–í–∞—Ä–∏–∞–Ω—Ç 1/"+n+": –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:");
            }

            /* 6. —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ */
            case ENTER_OPTION_TEXT -> {
                if (text.isBlank()) return plain(chat,"–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                AnswerOption opt = new AnswerOption();
                opt.setText(text);
                opt.setOptionNumber(d.currentOptionIndex);
                opt.setIsCorrect(false);
                d.currentQuestion.addAnswerOption(opt);

                if (d.currentOptionIndex < d.totalOptions) {
                    d.currentOptionIndex++;
                    return plain(chat,
                            "–í–∞—Ä–∏–∞–Ω—Ç "+d.currentOptionIndex+"/"+d.totalOptions+
                                    ": –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:");
                }
                stages.put(chat, Stage.CHOOSE_CORRECT);
                List<String> numbers = new ArrayList<>();
                for (int i = 1; i <= d.totalOptions; i++) numbers.add(String.valueOf(i));
                numbers.add("–û—Ç–º–µ–Ω–∞");
                return btn(chat,
                        "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:",
                        numbers);
            }

            case CHOOSE_CORRECT -> {
                int correct;
                try { correct = Integer.parseInt(text); }
                catch (NumberFormatException e){ return plain(chat,"–ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."); }
                if (correct < 1 || correct > d.totalOptions)
                    return plain(chat,"–ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.");

                d.currentQuestion.getAnswerOptions().get(correct - 1).setIsCorrect(true);
                d.questions.add(d.currentQuestion);

                if (d.currentQuestionIndex < d.totalQuestions) {
                    d.currentQuestionIndex++;
                    stages.put(chat, Stage.ENTER_QUESTION_TEXT);
                    return plain(chat,
                            "–í–æ–ø—Ä–æ—Å "+d.currentQuestionIndex+"/"+d.totalQuestions+
                                    ". –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
                } else {
                    stages.put(chat, Stage.DONE);
                    return finish(chat, d, user);
                }
            }

            default -> { return null; }
        }
    }
    private SendMessage finish(Long chat, Draft d, User u) {
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç
        testCreationService.createTest(u, d.test, d.questions);

        // —á–∏—Å—Ç–∏–º
        stages.remove(chat);
        drafts.remove(chat);

        return btn(chat,
                String.format("‚úÖ –¢–µ—Å—Ç ¬´%s¬ª —Å–æ–∑–¥–∞–Ω! –í–æ–ø—Ä–æ—Å–æ–≤: %d",
                        d.test.getTitle(), d.questions.size()),
                List.of("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));
    }
    private SendMessage cancel(Long chat, User user) {
        stages.remove(chat);
        drafts.remove(chat);

        ReplyKeyboardMarkup mainKb = new ReplyKeyboardMarkup();
        mainKb.setResizeKeyboard(true);
        mainKb.setKeyboard(List.of(
                kRow("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç","–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"),
                kRow("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å","–ú–æ–∏ —Ç–µ—Å—Ç—ã","–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        ));

        return SendMessage.builder()
                .chatId(chat.toString())
                .text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüëã –ü—Ä–∏–≤–µ—Ç, " + user.getFullName() + "!")
                .replyMarkup(mainKb)
                .build();
    }
    private SendMessage plain(Long c, String t) { return new SendMessage(c.toString(), t); }
    private SendMessage btn(Long chat, String text, List<String> btns) {
        KeyboardRow row = new KeyboardRow();
        btns.forEach(b -> row.add(new KeyboardButton(b)));
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);
        kb.setKeyboard(List.of(row));
        return SendMessage.builder()
                .chatId(chat.toString())
                .text(text)
                .replyMarkup(kb)
                .build();
    }
    private static KeyboardRow kRow(String... caps) {
        KeyboardRow r = new KeyboardRow();
        for (String c : caps) r.add(new KeyboardButton(c));
        return r;
    }
}
