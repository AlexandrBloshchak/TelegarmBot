package com.example.TelegramTestBot.controller;

import com.example.TelegramTestBot.model.*;
import com.example.TelegramTestBot.service.AnswerOptionService;
import com.example.TelegramTestBot.service.QuestionService;
import com.example.TelegramTestBot.service.TestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component
@RequiredArgsConstructor
public class TestEditorController {
    private final TestService        testService;
    private final QuestionService    questionService;
    private final AnswerOptionService answerService;
    private enum Stage {
        MENU, RENAME, ADD_Q, EDIT_Q_SELECT, EDIT_Q_TEXT,
        DELETE_Q_SELECT, ADD_A_SELECT, ADD_A_TEXT,
        DELETE_A_SELECT, DELETE_A_OPTION,
        SET_CORRECT_SELECT, SET_CORRECT_OPTION
    }
    private final Map<Long, Test>  currentTest          = new ConcurrentHashMap<>();
    private final Map<Long, Stage> stage                = new ConcurrentHashMap<>();
    private final Map<Long, Integer> pendingQuestionIdx = new ConcurrentHashMap<>();
    private static final String CANCEL = "–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è";
    public SendMessage startEditor(Long chat, Test t) {
        currentTest.put(chat, t);
        stage.put(chat, Stage.MENU);
        return menu(chat, t);
    }
    public boolean isInside(Long chat) { return currentTest.containsKey(chat); }
    public SendMessage handle(Update up) {
        long   chat = up.getMessage().getChatId();
        String txt  = up.getMessage().getText().trim();

        if ("–Ω–∞–∑–∞–¥".equalsIgnoreCase(txt)) {
            stage.put(chat, Stage.MENU);
            return menu(chat, currentTest.get(chat));
        }

        return switch (stage.get(chat)) {
            case MENU               -> menuClick(chat, txt);
            case RENAME             -> rename(chat, txt);
            case ADD_Q              -> addQ(chat, txt);
            case EDIT_Q_SELECT      -> editQSelect(chat, txt);
            case EDIT_Q_TEXT        -> editQText(chat, txt);
            case DELETE_Q_SELECT    -> deleteQSelect(chat, txt);
            case ADD_A_SELECT       -> handleAddASelect(chat, txt);
            case ADD_A_TEXT         -> handleAddAText(chat, txt);
            case DELETE_A_SELECT    -> deleteASelect(chat, txt);
            case DELETE_A_OPTION    -> deleteAOption(chat, txt);
            case SET_CORRECT_SELECT -> setCorrectSelect(chat, txt);
            case SET_CORRECT_OPTION -> setCorrectOption(chat, txt);
        };
    }
    private SendMessage menu(Long c, Test t) {
        return msg(c,
                "üõ† *–†–µ–¥–∞–∫—Ç–æ—Ä:* " + t.getTitle() + "\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                kb(
                        row("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ","–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å","–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å","–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞","–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"),
                        row("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
                        row(t.getShowAnswers() ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã" : "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã"),
                        row("–ù–∞–∑–∞–¥","–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                ));
    }
    private SendMessage menuClick(Long c, String txt) {
        Test t = currentTest.get(c);

        switch (txt.toLowerCase()) {
            case "—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã", "–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã" -> {
                boolean flag = !t.getShowAnswers();
                t.setShowAnswers(flag);
                testService.save(t);
                return menuWithPrefix(c,
                        flag ? "‚úÖ –û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è"
                                : "üôà –û—Ç–≤–µ—Ç—ã —Å–∫—Ä—ã—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", t);
            }
            case "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" -> {
                stage.put(c, Stage.RENAME);
                return ask(c, "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:");
            }
            case "—É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç" -> {
                testService.deleteTest(currentTest.remove(c));
                stage.remove(c);
                return simple(c, "‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω.");
            }
            case "–¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å" -> {
                stage.put(c, Stage.ADD_Q);
                return ask(c, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
            }
            case "–∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å" -> {
                stage.put(c, Stage.EDIT_Q_SELECT);
                return promptQuestionSelection(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
            }
            case "—É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å" -> {
                stage.put(c, Stage.DELETE_Q_SELECT);
                return promptQuestionSelection(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            }
            case "–¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" -> {
                stage.put(c, Stage.ADD_A_SELECT);
                return promptQuestionSelection(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:");
            }
            case "—É–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" -> {
                stage.put(c, Stage.DELETE_A_SELECT);
                return promptQuestionSelection(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç:");
            }
            case "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç" -> {
                stage.put(c, Stage.SET_CORRECT_SELECT);
                return promptQuestionSelection(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:");
            }
            case "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> {
                currentTest.remove(c);
                stage.remove(c);
                return simple(c, "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
            }
            default -> {
                return simple(c, "–ù–µ –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.");
            }
        }
    }
    private SendMessage rename(long c, String t) {
        Test test = currentTest.get(c);
        testService.renameTest(test, t);
        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", test);
    }
    private SendMessage addQ(long c, String t) {
        questionService.addQuestion(currentTest.get(c), t);
        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "‚ûï –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.", currentTest.get(c));
    }
    private SendMessage editQSelect(long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int idx = idxFromCaption(txt);
        if (idx < 0) return simple(c, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.");

        pendingQuestionIdx.put(c, idx);
        stage.put(c, Stage.EDIT_Q_TEXT);

        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(idx);
        return SendMessage.builder()
                .chatId(String.valueOf(c))
                .text("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n" + q.getText() +
                        "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ" + (idx+1) + ":")
                .build();
    }
    private SendMessage editQText(long c, String txt) {
        int idx = pendingQuestionIdx.remove(c);
        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(idx);
        questionService.updateQuestion(q, txt);
        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "‚úèÔ∏è –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", currentTest.get(c));
    }
    private SendMessage deleteQSelect(long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int idx = idxFromCaption(txt);
        if (idx < 0) return simple(c,"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.");

        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(idx);
        questionService.deleteQuestion(q.getId());

        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "üóë –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.", currentTest.get(c));
    }
    private SendMessage handleAddASelect(Long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int qidx = idxFromCaption(txt);
        if (qidx < 0) return simple(c,"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.");

        pendingQuestionIdx.put(c, qidx);
        stage.put(c, Stage.ADD_A_TEXT);
        return ask(c,
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª –∏–ª–∏ ¬´–≤–µ—Ä–Ω—ã–π¬ª,\n" +
                        "–µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:");
    }
    private SendMessage handleAddAText(Long c, String txt) {
        int qidx = pendingQuestionIdx.remove(c);
        boolean correct = txt.toLowerCase().matches(".*(–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π|–≤–µ—Ä–Ω—ã–π).*");
        String answer = txt.replaceAll("(?i)(–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π|–≤–µ—Ä–Ω—ã–π)", "").trim();

        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(qidx);
        answerService.addAnswer(q, answer, correct);

        stage.put(c, Stage.MENU);
        return menu(c, currentTest.get(c));
    }
    private SendMessage deleteASelect(Long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int qidx = idxFromCaption(txt);
        if (qidx < 0) return simple(c,"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.");

        pendingQuestionIdx.put(c, qidx);
        stage.put(c, Stage.DELETE_A_OPTION);

        List<AnswerOption> opts = questionService.getQuestionsByTestId(currentTest.get(c).getId())
                .get(qidx).getAnswerOptions();
        List<KeyboardRow> rows = new ArrayList<>();
        for (int i = 1; i <= opts.size(); i++) rows.add(row(String.valueOf(i)));
        rows.add(row(CANCEL));

        return msg(c, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", keyboard(rows));
    }
    private SendMessage deleteAOption(long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int aidx = Integer.parseInt(txt.trim());
        int qidx = pendingQuestionIdx.get(c);

        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(qidx);
        answerService.deleteAnswer(q, aidx);

        pendingQuestionIdx.remove(c);
        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "üóë –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —É–¥–∞–ª—ë–Ω.", currentTest.get(c));
    }
    private SendMessage setCorrectSelect(Long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int qidx = idxFromCaption(txt);
        if (qidx < 0) return simple(c,"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π.");

        pendingQuestionIdx.put(c, qidx);
        stage.put(c, Stage.SET_CORRECT_OPTION);

        List<AnswerOption> opts = questionService.getQuestionsByTestId(currentTest.get(c).getId())
                .get(qidx).getAnswerOptions();
        List<KeyboardRow> rows = new ArrayList<>();
        for (int i = 1; i <= opts.size(); i++) rows.add(row(String.valueOf(i)));
        rows.add(row(CANCEL));

        return msg(c, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", keyboard(rows));
    }
    private SendMessage setCorrectOption(long c, String txt) {
        if (CANCEL.equalsIgnoreCase(txt)) { stage.put(c, Stage.MENU); return menu(c,currentTest.get(c)); }

        int aidx = Integer.parseInt(txt.trim());
        int qidx = pendingQuestionIdx.get(c);

        Question q = questionService.getQuestionsByTestId(currentTest.get(c).getId()).get(qidx);
        answerService.setCorrectAnswer(q, aidx);

        pendingQuestionIdx.remove(c);
        stage.put(c, Stage.MENU);
        return menuWithPrefix(c, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", currentTest.get(c));
    }
    private int idxFromCaption(String cap) {
        if (cap.isEmpty() || !Character.isDigit(cap.charAt(0))) return -1;
        String num = cap.split("[).]", 2)[0].trim();
        return Integer.parseInt(num) - 1;          // 0-based
    }
    private SendMessage menuWithPrefix(long chat, String prefix, Test t) {
        return msg(chat,
                prefix + "\n\nüõ† *–†–µ–¥–∞–∫—Ç–æ—Ä:* " + t.getTitle() + "\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                kb(
                        row("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ","–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å","–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å","–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞","–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"),
                        row("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
                        row("–ù–∞–∑–∞–¥","–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                ));
    }
    private SendMessage ask(Long c, String t) { return simple(c,"‚ÑπÔ∏è "+t); }
    private SendMessage simple(Long c, String t) { return new SendMessage(String.valueOf(c), t); }
    private SendMessage msg(Long c, String t, ReplyKeyboardMarkup kb) {
        return SendMessage.builder()
                .chatId(String.valueOf(c))
                .text(t)
                .parseMode("Markdown")
                .replyMarkup(kb)
                .build();
    }
    private SendMessage promptQuestionSelection(Long c, String text) {
        List<Question> qs = questionService.getQuestionsByTestId(currentTest.get(c).getId());
        List<KeyboardRow> rows = new ArrayList<>();
        int n = 1;
        for (Question q : qs) {
            String cap = n + ") " + q.getText().replaceAll("\\R", " ").replaceAll(" {2,}", " ").strip();
            if (cap.length() > 50) cap = cap.substring(0, 47) + "‚Ä¶";
            rows.add(row(cap));
            n++;
        }
        rows.add(row(CANCEL));
        return msg(c, text, keyboard(rows));
    }
    private static KeyboardRow row(String... caps) {
        KeyboardRow r = new KeyboardRow();
        for (String cap : caps) r.add(new KeyboardButton(cap));
        return r;
    }
    private static ReplyKeyboardMarkup keyboard(List<KeyboardRow> rows) {
        ReplyKeyboardMarkup k = new ReplyKeyboardMarkup();
        k.setResizeKeyboard(true);
        k.setKeyboard(rows);
        return k;
    }
    private static ReplyKeyboardMarkup kb(KeyboardRow... rows) { return keyboard(Arrays.asList(rows)); }
}
