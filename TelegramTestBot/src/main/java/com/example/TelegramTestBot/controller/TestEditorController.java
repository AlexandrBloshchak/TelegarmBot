package com.example.TelegramTestBot.controller;

import com.example.TelegramTestBot.model.*;
import com.example.TelegramTestBot.service.AnswerOptionService;
import com.example.TelegramTestBot.service.QuestionService;
import com.example.TelegramTestBot.service.TestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component
@RequiredArgsConstructor
public class TestEditorController {

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–µ—Ä–≤–∏—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private final TestService         testService;
    private final QuestionService     questionService;
    private final AnswerOptionService answerService;

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    private final Map<Long, Test>  currentTest = new ConcurrentHashMap<>();
    private final Map<Long, Stage> stage       = new ConcurrentHashMap<>();

    private enum Stage { MENU, RENAME, ADD_Q, EDIT_Q, DELETE_Q,
        ADD_A, DELETE_A, SET_CORRECT }

    /* ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê PUBLIC ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê */

    public SendMessage startEditor(Long chat, Test t) {
        currentTest.put(chat, t);
        stage.put(chat, Stage.MENU);
        return menu(chat, t);
    }
    public boolean isInside(Long chat) { return currentTest.containsKey(chat); }

    public SendMessage handle(Update up) {
        long   chat = up.getMessage().getChatId();
        String txt  = up.getMessage().getText().trim();

        if (txt.equalsIgnoreCase("–Ω–∞–∑–∞–¥")) {
            stage.put(chat, Stage.MENU);
            return menu(chat, currentTest.get(chat));
        }
        return switch (stage.get(chat)) {
            case MENU        -> menuClick(chat, txt);
            case RENAME      -> rename(chat, txt);
            case ADD_Q       -> addQ(chat, txt);
            case EDIT_Q      -> editQ(chat, txt);
            case DELETE_Q    -> delQ(chat, txt);
            case ADD_A       -> addA(chat, txt);
            case DELETE_A    -> delA(chat, txt);
            case SET_CORRECT -> setCorrect(chat, txt);
        };
    }

    /* ‚ïê‚ïê‚ïê‚ïê‚ïê –º–µ–Ω—é ‚ïê‚ïê‚ïê‚ïê‚ïê */

    private SendMessage menu(Long c, Test t) {
        return msg(c,
                "üõ† *–†–µ–¥–∞–∫—Ç–æ—Ä:* " + t.getTitle() + "\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                kb(row("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
                        row("–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
                        row("–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞", "–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"),
                        row("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
                        row("–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")));
    }
    private SendMessage menuClick(Long c, String txt) {
        return switch (txt.toLowerCase()) {
            case "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" -> { stage.put(c, Stage.RENAME); yield ask(c,"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"); }
            case "—É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"      -> { testService.deleteTest(currentTest.remove(c)); stage.remove(c);
                yield simple(c,"‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω."); }
            case "–¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"         -> { stage.put(c, Stage.ADD_Q);  yield ask(c,"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"); }
            case "–∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"         -> { stage.put(c, Stage.EDIT_Q); yield ask(c,"‚Ññ | –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"); }
            case "—É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"          -> { stage.put(c, Stage.DELETE_Q);yield ask(c,"‚Ññ –≤–æ–ø—Ä–æ—Å–∞"); }
            case "–¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞" -> { stage.put(c, Stage.ADD_A);  yield ask(c,"‚Ññ | —Ç–µ–∫—Å—Ç | +"); }
            case "—É–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"  -> { stage.put(c, Stage.DELETE_A);yield ask(c,"‚Ññ –≤–æ–ø—Ä | ‚Ññ –≤–∞—Ä–∏–∞–Ω—Ç–∞"); }
            case "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"->{ stage.put(c, Stage.SET_CORRECT);yield ask(c,"‚Ññ –≤–æ–ø—Ä | ‚Ññ –≤–∞—Ä–∏–∞–Ω—Ç–∞"); }
            case "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"            -> { currentTest.remove(c); stage.remove(c);
                yield simple(c,"–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."); }
            default -> simple(c,"–ù–µ –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.");
        };
    }

    /* ‚ïê‚ïê‚ïê‚ïê‚ïê –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚ïê‚ïê‚ïê‚ïê‚ïê */

    private SendMessage rename(Long c,String t){ testService.renameTest(currentTest.get(c),t);
        stage.put(c,Stage.MENU); return simple(c,"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ."); }

    private SendMessage addQ(Long c,String t){ questionService.addQuestion(currentTest.get(c),t);
        stage.put(c,Stage.MENU); return simple(c,"‚ûï –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω."); }

    private SendMessage editQ(Long c,String s){
        String[] p=s.split("\\|",2); if(p.length<2) return ask(c,"‚Ññ | —Ç–µ–∫—Å—Ç");
        int idx=Integer.parseInt(p[0].trim())-1;
        List<Question> qs=questionService.getQuestionsByTestId(currentTest.get(c).getId());
        if(idx<0||idx>=qs.size()) return simple(c,"–ù–µ–≤–µ—Ä–Ω—ã–π ‚Ññ");
        questionService.updateQuestion(qs.get(idx),p[1].trim());
        stage.put(c,Stage.MENU); return simple(c,"‚úèÔ∏è –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω."); }

    private SendMessage delQ(Long c,String s){
        int idx=Integer.parseInt(s.trim())-1;
        List<Question> qs=questionService.getQuestionsByTestId(currentTest.get(c).getId());
        if(idx<0||idx>=qs.size()) return simple(c,"–ù–µ–≤–µ—Ä–Ω—ã–π ‚Ññ");
        questionService.deleteQuestion(qs.get(idx).getId());
        stage.put(c,Stage.MENU); return simple(c,"üóë –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω."); }

    private SendMessage addA(Long c,String s){
        String[] p=s.split("\\|"); if(p.length<3) return ask(c,"‚Ññ|—Ç–µ–∫—Å—Ç|+");
        int qIdx=Integer.parseInt(p[0].trim())-1;
        boolean ok=p[2].trim().equals("+");
        List<Question> qs=questionService.getQuestionsByTestId(currentTest.get(c).getId());
        if(qIdx<0||qIdx>=qs.size()) return simple(c,"–ù–µ–≤–µ—Ä–Ω—ã–π ‚Ññ –≤–æ–ø—Ä–æ—Å–∞");
        answerService.addAnswer(qs.get(qIdx),p[1].trim(),ok);
        stage.put(c,Stage.MENU); return simple(c,"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ."); }

    private SendMessage delA(Long c,String s){
        String[] p=s.split("\\|"); if(p.length<2) return ask(c,"‚Ññ|‚Ññ");
        int qIdx=Integer.parseInt(p[0].trim())-1;
        int aIdx=Integer.parseInt(p[1].trim());
        List<Question> qs=questionService.getQuestionsByTestId(currentTest.get(c).getId());
        if(qIdx<0||qIdx>=qs.size()) return simple(c,"–ù–µ–≤–µ—Ä–Ω—ã–π ‚Ññ –≤–æ–ø—Ä–æ—Å–∞");
        answerService.deleteAnswer(qs.get(qIdx),aIdx);
        stage.put(c,Stage.MENU); return simple(c,"üóë –£–¥–∞–ª–µ–Ω–æ."); }

    private SendMessage setCorrect(Long c,String s){
        String[] p=s.split("\\|"); if(p.length<2) return ask(c,"‚Ññ|‚Ññ");
        int qIdx=Integer.parseInt(p[0].trim())-1;
        int aIdx=Integer.parseInt(p[1].trim());
        List<Question> qs=questionService.getQuestionsByTestId(currentTest.get(c).getId());
        if(qIdx<0||qIdx>=qs.size()) return simple(c,"–ù–µ–≤–µ—Ä–Ω—ã–π ‚Ññ –≤–æ–ø—Ä–æ—Å–∞");
        answerService.setCorrectAnswer(qs.get(qIdx),aIdx);
        stage.put(c,Stage.MENU); return simple(c,"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ."); }

    private SendMessage ask(Long c, String t)   { return simple(c, "‚ÑπÔ∏è " + t); }
    private SendMessage simple(Long c, String t){ return new SendMessage(c.toString(), t); }

    private SendMessage msg(Long c, String t, ReplyKeyboardMarkup kb) {
        SendMessage m = new SendMessage(c.toString(), t);
        m.setParseMode("Markdown");
        m.setReplyMarkup(kb);
        return m;
    }

    /** –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–µ–π */
    private static KeyboardRow row(String... captions) {
        KeyboardRow r = new KeyboardRow();
        for (String cap : captions) {
            r.add(new KeyboardButton(cap));      // <-- –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–Ω–æ–ø–∫—É
        }
        return r;
    }

    /** –°–æ–∑–¥–∞—ë—Ç –≥–æ—Ç–æ–≤—ã–π ReplyKeyboardMarkup */
    private static ReplyKeyboardMarkup kb(KeyboardRow... rows) {
        ReplyKeyboardMarkup k = new ReplyKeyboardMarkup();
        k.setResizeKeyboard(true);
        k.setKeyboard(Arrays.asList(rows));
        return k;
    }
}
