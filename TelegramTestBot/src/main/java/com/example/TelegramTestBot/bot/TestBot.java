package com.example.TelegramTestBot.bot;

import com.example.TelegramTestBot.controller.AuthController;
import com.example.TelegramTestBot.controller.TestCreatorController;
import com.example.TelegramTestBot.controller.TestParticipantController;
import com.example.TelegramTestBot.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Slf4j
@Component
public class TestBot extends TelegramLongPollingBot {

    private final String botUsername;
    private final String botToken;

    private final AuthController authController;
    private final TestParticipantController participantController;
    private final TestCreatorController   creatorController;
    private final SessionService          sessionService;

    public TestBot(@Value("${telegram.bot.username}") String botUsername,
                   @Value("${telegram.bot.token}")    String botToken,
                   AuthController authController,
                   @Lazy TestParticipantController participantController,
                   @Lazy TestCreatorController   creatorController,
                   SessionService sessionService) {

        this.botUsername         = botUsername;
        this.botToken            = botToken;
        this.authController      = authController;
        this.participantController = participantController;
        this.creatorController     = creatorController;
        this.sessionService        = sessionService;
    }

    /* ------------------------------------------------------------------ */

    @Override public String getBotUsername() { return botUsername; }
    @Override public String getBotToken()    { return botToken;    }

    /* ============================= MAIN ============================== */

    @Override
    public void onUpdateReceived(Update update) {

        try {
            /* 1. –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
            if (!update.hasMessage()) return;

            Message msg   = update.getMessage();
            Long    chat  = msg.getChatId();
            String  text  = msg.hasText() ? msg.getText().trim() : "";

            /* 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */
            SendMessage authResp = authController.handleAuth(update);
            if (authResp != null) {
                executeMessage(authResp);

                /* 2.1. –£—Å–ø–µ—Ö ‚Üí –º–µ–Ω—é */
                if (authResp.getText().startsWith("‚úÖ")) {
                    Optional<UserSession> s = sessionService.getSession(chat);
                    if (s.isPresent()) sendMainMenu(chat, s.get().getUser());
                    else               sendError(chat);
                }
                return;
            }

            /* 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–ª–æ–≥–∏–Ω–µ–Ω? ‚Üí –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω */
            if (sessionService.getSession(chat).isEmpty()) {
                if (text.equalsIgnoreCase("/login") || text.equalsIgnoreCase("–≤–æ–π—Ç–∏")) {
                    executeMessage(authController.startLoginProcess(chat));
                } else if (text.equalsIgnoreCase("/registr") || text.equalsIgnoreCase("–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")) {
                    executeMessage(authController.startRegistrationProcess(chat));
                } else {
                    sendWelcome(chat);
                }
                return;
            }

            /* 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω */
            UserSession session = sessionService.getSession(chat).orElseThrow();

            /* 4.1. –í—ã—Ö–æ–¥ */
            if ("–≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞".equalsIgnoreCase(text)) {
                sessionService.removeSession(chat);
                executeMessage(new SendMessage(chat.toString(), "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."));
                sendWelcome(chat);
                return;
            }

            /* 4.2. –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ */
            handleAuthenticated(update, session);

        } catch (Exception e) {
            log.error("Error processing update", e);
            if (update.hasMessage())
                sendError(update.getMessage().getChatId());
        }
    }

    /* ============================= AUTH USER ============================== */

    private void handleAuthenticated(Update update, UserSession session) {

        Long   chat = update.getMessage().getChatId();
        User   user = session.getUser();
        String text = update.getMessage().hasText() ? update.getMessage().getText().trim() : "";

        switch (text.toLowerCase()) {
            case "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> { sendMainMenu(chat, user); return; }
            case "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"  -> { showProfile(chat, user); return; }
            case "—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç" -> { creatorController.startTestCreation(chat, user); return; }
            case "–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"  -> {
                BotApiMethod<?> resp = participantController.handleUpdate(update, user);
                if (resp != null) executeMessage((SendMessage) resp);
                return;
            }
        }

        /* --- –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è / –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ -------- */
        if (creatorController.isAwaitingTestName(chat) ||
                creatorController.isAwaitingDocument(chat) ||
                update.getMessage().hasDocument()) {

            SendMessage resp = creatorController.handleUpdate(update, user);
            if (resp != null) executeMessage(resp);
            return;
        }

        BotApiMethod<?> part = participantController.handleUpdate(update, user);
        if (part != null) { executeMessage((SendMessage) part); return; }

        /* --- fallback: –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é */
        sendMainMenu(chat, user);
    }

    /* ============================= UI HELPERS ============================== */

    /* ---------- sendWelcome ------------ */
    private void sendWelcome(Long chat) {
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);
        kb.setOneTimeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("–í–æ–π—Ç–∏");
        row.add("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
        kb.setKeyboard(List.of(row));

        SendMessage msg = new SendMessage(chat.toString(), "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        msg.setReplyMarkup(kb);

        executeMessage(msg);
    }

    /* ---------- sendMainMenu ------------ */
    private void sendMainMenu(Long chat, User user) {
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup();
        kb.setResizeKeyboard(true);

        KeyboardRow r1 = new KeyboardRow();
        r1.add("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç");
        r1.add("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç");

        KeyboardRow r2 = new KeyboardRow();
        r2.add("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
        r2.add("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞");

        kb.setKeyboard(List.of(r1, r2));

        SendMessage msg = new SendMessage(
                chat.toString(),
                "üëã –ü—Ä–∏–≤–µ—Ç, " + user.getFullName() + "! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        );
        msg.setReplyMarkup(kb);

        executeMessage(msg);
    }


    private void showProfile(Long chat, User user) {
        String created = creatorController.getUserCreatedTestsInfo(user);
        int    passed  = participantController.getCompletedTestsCount(user);

        String msg = "üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n" +
                "–ò–º—è: "   + user.getFullName() + '\n' +
                "–õ–æ–≥–∏–Ω: " + user.getUsername() + "\n\n" +
                "üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n" + created + "\n\n" +
                "‚úÖ " + (passed > 0 ? "–ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: " + passed
                : "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞");

        executeMessage(new SendMessage(chat.toString(), msg));
    }

    /* ------------------------------------------------------------------ */

    private void sendError(Long chat) {
        executeMessage(new SendMessage(chat.toString(),
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."));
    }

    public void executeMessage(SendMessage msg) {
        try { execute(msg); }
        catch (TelegramApiException e) { log.error("Error sending message", e); }
    }
}
